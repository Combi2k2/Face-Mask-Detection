# -*- coding: utf-8 -*-
"""Human Detecition

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o67o5RStE21ny4atQ2EUX6-koR8xNNJP
"""

import os

os.system('pip3 install cupy-cuda111==8.1.0')
os.system('pip3 install chainer')
os.system('pip3 install chainercv')

import argparse
import matplotlib.pyplot as plot

import chainer

from chainercv.links import FasterRCNNVGG16
from chainercv import utils
from chainercv.visualizations import vis_bbox

import urllib.request
import os

def download_model(url, dest):
    destdir = os.path.dirname(dest)
    if not os.path.exists(destdir):
        os.makedirs(destdir)
    
    print("Downloading {}... \nThis may take several minutes.".format(dest))
    urllib.request.urlretrieve(url, dest)

TRAINED_MODEL_DEFAULT = 'trained_model/snapshot_model.npz'
MODEL_URL = 'http://nixeneko.2-d.jp/hatenablog/20170724_facedetection_model/snapshot_model.npz'

# A pretrained model for the higher version of chainercv.
TRAINED_MODEL_NEW = 'trained_model/snapshot_model_20180404.npz'
MODEL_URL_NEW = 'http://nixeneko.2-d.jp/hatenablog/20170724_facedetection_model/snapshot_model_20180404.npz'

download_model(MODEL_URL_NEW, TRAINED_MODEL_NEW)
model = FasterRCNNVGG16(
    n_fg_class=1,
    pretrained_model=TRAINED_MODEL_NEW)

#model.to_gpu([1], '@numpy', )
#chainer.cuda.get_device([1], '@numpy', None).use()

img = utils.read_image('public_test/images/10.jpg', color=True)
bboxes, labels, scores = model.predict([img])
bbox, label, score = bboxes[0], labels[0], scores[0]

vis_bbox(img, bbox)#, label, score)

plot.show()

print(bbox)

import json

Faces_in_img = dict()

os.system('mkdir NEW_INPUT')

#To generate bounding boxes for every image in my test dataset
for i in range(1, 543):
    fname = str(i) + '.jpg'
    fpath = 'public_test/images/' + fname

    img = utils.read_image(fpath, color=True)
    bboxes, labels, scores = model.predict([img])

    Data = dict()
    Data['boxes'] = bboxes[0].tolist()
    Data['label'] = labels[0].tolist()
    Data['score'] = scores[0].tolist()

    json_data = json.dumps(Data, indent = 4)

    with open(f'NEW_INPUT/{i}.json', 'w') as f:
        f.write(json_data)
      
    print(f'Image {i}: COMPLETED')

